{"version":3,"sources":["webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/+state/settings.actions.ts","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/+state/settings.effects.ts","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/+state/settings.reducer.ts","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/settings.module.ts","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/settings.service.ts","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/settings/settings.component.css","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/settings/settings.component.html","webpack:////home/fer/sources/propio/libros/angular-ngrx-nx-realworld-example-app/libs/settings/src/lib/settings/settings.component.ts"],"names":[],"mappings":"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","file":"angular-ngrx-nx-realworld-example-app-settings.js","sourcesContent":["import { User } from '@angular-ngrx-nx-realworld-example-app/api';\nimport { Action } from '@ngrx/store';\n\nexport enum SettingsActionTypes {\n  EDIT_SETTINGS = '[settings] EDIT_SETTINGS'\n}\n\nexport class EditSettings implements Action {\n  readonly type = SettingsActionTypes.EDIT_SETTINGS;\n}\n\nexport type SettingsAction = EditSettings;\n","import { AuthFacade, GetUser } from '@angular-ngrx-nx-realworld-example-app/auth';\nimport { NgrxFormsFacade, SetErrors } from '@angular-ngrx-nx-realworld-example-app/ngrx-forms';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap, withLatestFrom } from 'rxjs/operators';\n\nimport { SettingsService } from '../settings.service';\nimport { EditSettings, SettingsActionTypes } from './settings.actions';\n\n@Injectable()\nexport class SettingsEffects {\n\t@Effect()\n\teditSettings = this.actions.ofType<EditSettings>(SettingsActionTypes.EDIT_SETTINGS).pipe(\n\t\twithLatestFrom(this.ngrxFormsFacade.data$, this.authFacade.user$),\n\t\tmap(([_, data, user]) => ({\n\t\t\t...user,\n\t\t\timage: data.image,\n\t\t\tusername: data.username,\n\t\t\tbio: data.bio,\n\t\t\tpass: data.pass,\n\t\t\temail: data.email\n\t\t})),\n\t\tconcatMap(data =>\n\t\t\tthis.settingsService\n\t\t\t\t.update(data)\n\t\t\t\t.pipe(\n\t\t\t\t\tmergeMap(result => [new GetUser(), { type: '[router] Go', payload: { path: ['profile', result.username] } }]),\n\t\t\t\t\tcatchError(result => of(new SetErrors(result.error.errors)))\n\t\t\t\t)\n\t\t)\n\t);\n\n\tconstructor(\n\t\tprivate actions: Actions,\n\t\tprivate settingsService: SettingsService,\n\t\tprivate authFacade: AuthFacade,\n\t\tprivate ngrxFormsFacade: NgrxFormsFacade\n\t) { }\n}\n","import { SettingsAction } from './settings.actions';\n\nexport interface SettingsState {\n  readonly settings: {};\n}\n\nexport function settingsReducer(state: {}, action: SettingsAction): {} {\n  switch (action.type) {\n    default: {\n      return state;\n    }\n  }\n}\n","import { AuthGuardService } from '@angular-ngrx-nx-realworld-example-app/auth';\nimport { NgrxFormsModule } from '@angular-ngrx-nx-realworld-example-app/ngrx-forms';\nimport { SettingsService } from './settings.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { SettingsEffects } from './+state/settings.effects';\nimport { settingsReducer } from './+state/settings.reducer';\nimport { SettingsComponent } from './settings/settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgrxFormsModule,\n    RouterModule.forChild([\n      { path: '', pathMatch: 'full', component: SettingsComponent, canActivate: [AuthGuardService] }\n    ]),\n    StoreModule.forFeature('settings', settingsReducer, { initialState: {} }),\n    EffectsModule.forFeature([SettingsEffects])\n  ],\n  declarations: [SettingsComponent],\n  providers: [SettingsEffects, SettingsService]\n})\nexport class SettingsModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService, User } from '@angular-ngrx-nx-realworld-example-app/api';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class SettingsService {\n  constructor(private apiService: ApiService) {}\n\n  update(user): Observable<User> {\n    return this.apiService.put('/user', { user }).pipe(map(result => result.user));\n  }\n}\n","module.exports = \".edit-button-container {\\n  display: flex;\\n  justify-content: flex-end;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvc2V0dGluZ3Mvc3JjL2xpYi9zZXR0aW5ncy9zZXR0aW5ncy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLDBCQUEwQjtDQUMzQiIsImZpbGUiOiJsaWJzL3NldHRpbmdzL3NyYy9saWIvc2V0dGluZ3Mvc2V0dGluZ3MuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lZGl0LWJ1dHRvbi1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuIl19 */\"","module.exports = \"<div class=\\\"settings-page\\\">\\n\\t<div class=\\\"container page\\\">\\n\\t\\t<div class=\\\"row\\\">\\n\\n\\t\\t\\t<div class=\\\"col-md-6 offset-md-3 col-xs-12\\\">\\n\\t\\t\\t\\t<h1 class=\\\"text-xs-center\\\">Your Settings</h1>\\n\\n\\t\\t\\t\\t<app-list-errors></app-list-errors>\\n\\n\\t\\t\\t\\t<app-dynamic-form (updateForm)=\\\"updateForm($event)\\\" [data$]=\\\"data$\\\" [structure$]=\\\"structure$\\\">\\n\\t\\t\\t\\t</app-dynamic-form>\\n\\t\\t\\t\\t<div class=\\\"edit-button-container\\\">\\n\\t\\t\\t\\t\\t<button (click)=\\\"submit()\\\" class=\\\"btn btn-lg btn-primary pull-xs-right\\\" type=\\\"submit\\\">\\n\\t\\t\\t\\t\\t\\tUpdate Settings\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<hr />\\n\\n\\t\\t\\t\\t<!--button class=\\\"btn btn-outline-danger\\\" (click)=\\\"logout()\\\">\\n\\t\\t\\t\\t\\tOr click here to logout.\\n\\t\\t\\t\\t</button-->\\n\\t\\t\\t</div>\\n\\n\\t\\t</div>\\n\\t</div>\\n</div>\"","import { AuthFacade } from '@angular-ngrx-nx-realworld-example-app/auth';\nimport { Field, NgrxFormsFacade } from '@angular-ngrx-nx-realworld-example-app/ngrx-forms';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { EditSettings } from '../+state/settings.actions';\n\nconst structure: Field[] = [\n  {\n    type: 'INPUT',\n    name: 'image',\n    placeholder: 'URL of profile picture',\n    validator: []\n  },\n  {\n    type: 'INPUT',\n    name: 'username',\n    placeholder: 'Your Name',\n    validator: [Validators.required]\n  },\n  {\n    type: 'TEXTAREA',\n    name: 'bio',\n    placeholder: 'Short bio about you',\n    validator: []\n  },\n  {\n    type: 'INPUT',\n    name: 'email',\n    placeholder: 'Email',\n    validator: [Validators.required]\n  },\n  {\n    type: 'INPUT',\n    name: 'password',\n    placeholder: 'New Password',\n    validator: [Validators.required],\n    attrs: {\n      type: 'password'\n    }\n  }\n];\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SettingsComponent implements OnInit {\n  structure$: Observable<Field[]>;\n  data$: Observable<any>;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private authFacade: AuthFacade,\n    private ngrxFormsFacade: NgrxFormsFacade\n  ) {}\n\n  ngOnInit() {\n    this.ngrxFormsFacade.setStructure(structure);\n    this.authFacade.user$.subscribe(user => this.ngrxFormsFacade.setData(user));\n    this.data$ = this.ngrxFormsFacade.data$;\n    this.structure$ = this.ngrxFormsFacade.structure$;\n  }\n\n  updateForm(changes: any) {\n    this.ngrxFormsFacade.updateData(changes);\n  }\n\n  submit() {\n    this.store.dispatch(new EditSettings());\n  }\n\n  logout() {\n    this.authFacade.logout();\n  }\n}\n"],"sourceRoot":""}